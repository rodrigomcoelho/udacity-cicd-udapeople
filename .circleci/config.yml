version: 2.1

orbs:
  slack: circleci/slack@4.1.4

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      workflow-id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            aws s3 rm "s3://udapeople-<<parameters.workflow-id>>/" --recursive
            aws cloudformation delete-stack \
              --stack-name "udapeople-front-end-<<parameters.workflow-id>>"
            aws cloudformation delete-stack \
              --stack-name "udapeople-back-end-<<parameters.workflow-id>>"


  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here
      workflow-id:
        type: string
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            export SUCCESS=$(curl -H "token: fc7be75f-2231-4f5f-968e-710726bd778e" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID})
            if(( $SUCCESS==1 ));
            then
              cd ~/project/backend
              npm install
            #  Add revert code here. You can find this in the Getting Started section.
              npm run migrations:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt-get -y update
            sudo apt-get -y install awscli
            sudo apt-get -y install curl
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd ./frontend
            npm install --package-lock
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # Your code here
            sudo apt-get -y update
            sudo apt-get -y install awscli
            sudo apt-get -y install curl
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here
             cd ./backend
             npm install --package-lock
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend/dist/

  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Dependencies
      - run:
          name: Install dependencies
          command: |
            # Your code here
            sudo apt-get -y update
            sudo apt-get -y install awscli
            sudo apt-get -y install curl
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Front-End test
          command: |
            cd ./frontend
            npm run test
          no_output_timeout: 15m

  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Dependencies
      - run:
          name: Install dependencies
          command: |
            # Your code here
            sudo apt-get -y update
            sudo apt-get -y install awscli
            sudo apt-get -y install curl
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Back End test
          command: |
            cd ./backend
            npm run test

  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Dependencies
      - run:
          name: Install dependencies
          command: |
            # Your code here
            sudo apt-get -y update
            sudo apt-get -y install awscli
            sudo apt-get -y install curl
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Front-End Analyze
          command: |
            cd ./frontend
            npm audit --audit-level=critical

  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Dependencies
      - run:
          name: Install dependencies
          command: |
            # Your code here
            sudo apt-get -y update
            sudo apt-get -y install awscli
            sudo apt-get -y install curl
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Back.End Analyze
          command: |
            cd ./backend
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install tar and gzip
          command: |
            yum -y install  tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=$CIRCLE_PROJECT_REPONAME \
              --stack-name "udapeople-back-end-$CIRCLE_WORKFLOW_ID" \
              --parameter-overrides ID="$CIRCLE_WORKFLOW_ID"

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=$CIRCLE_PROJECT_REPONAME \
              --stack-name "udapeople-front-end-$CIRCLE_WORKFLOW_ID" \
              --parameter-overrides ID="$CIRCLE_WORKFLOW_ID"

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters "Name=tag:Name,Values=backend-$CIRCLE_WORKFLOW_ID" \
                --output text >> ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow-id: $CIRCLE_WORKFLOW_ID

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["bc:78:08:9c:b1:50:d0:77:b4:39:87:76:88:4e:13:8c"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # Your code here
            apk add --no-cache tar gzip
            apk add --update ansible
            apk add --update curl
            apk add --update jq

      - run:
          name: Configure server
          command: |
            # Your code here
            cd ~/project/.circleci/ansible/
            ansible-playbook -i inventory.txt configure-server.yml
      # Install aws client
      - run:
          name: Install aws cli for rollback procedure
          when: on_fail
          command: |
            pip install --upgrade pip
            pip install awscli
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow-id: $CIRCLE_WORKFLOW_ID

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # Your code here
            sudo apt-get -y update
            sudo apt-get -y install awscli
            sudo apt-get -y install curl
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            # Your code here
            cd ./backend
            npm run migrations >> migrations_output.txt
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            cd ./backend
            if(grep "Has been executed successfully" migrations_output.txt); then
              curl -H "Content-Type: text/plain" -H "token: fc7be75f-2231-4ff-968e-710726bd778e" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            fi
     # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow-id: $CIRCLE_WORKFLOW_ID

      - revert-migrations:
          workflow-id: $CIRCLE_WORKFLOW_ID

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            curl -sL https://rpm.nodesource.com/setup_14.x | bash -
            yum install -y nodejs
            yum install -y tar
            yum install -y curl
            yum install -y gzip
      - restore_cache:
          key: frontend-build
      - run:
          name: Moves cache to current working directory
          command: |
            cp -r /home/circleci/* ~/
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(awk "NR==2" ~/project/.circleci/ansible/inventory.txt)
            echo "Back end ip is ${BACKEND_IP}"
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}" >> $BASH_ENV
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            export BACKEND_IP=$(awk "NR==2" ~/project/.circleci/ansible/inventory.txt)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL ${API_URL}"
            cd ./frontend
            npm run build
            cd ./dist
            aws s3 sync . s3://udapeople-"${CIRCLE_WORKFLOW_ID}"/ --delete
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow-id: $CIRCLE_WORKFLOW_ID
      - revert-migrations:
          workflow-id: $CIRCLE_WORKFLOW_ID

  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["bc:78:08:9c:b1:50:d0:77:b4:39:87:76:88:4e:13:8c"]

      - restore_cache:
          key: [backend-build]
      #cache is left in /home/circleci/ this step copies folders to home directory
      - run:
          name: Moves cache to current working directory
          command: |
            cp -r /home/circleci/* ~/

      - run:
          name: Install dependencies
          command: |
            # Your code here
            apk add --no-cache tar gzip
            apk add --update ansible
            apk add --update curl
            apk add --update jq
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Compress Node Modules folder for deployment
          command:  |
            cd ~/project/backend/
            tar -cvzf node_modules.tar.gz ./node_modules
      - run:
          name: Copy Files to server
          no_output_timeout: 30m
          command: |
            cd ~/project/.circleci/ansible/
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failur
      - run:
          name: Install aws cli for rollback procedure
          when: on_fail
          command: |
            pip install --upgrade pip
            pip install awscli

      - destroy-environment:
          workflow-id: $CIRCLE_WORKFLOW_ID

      - revert-migrations:
          workflow-id: $CIRCLE_WORKFLOW_ID

  smoke-test:
    docker:
      # Lightweight Docker image
      - image: alpine:latest
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update curl
            apk add --update jq
            apk add  --no-cache \
                        python3 \
                        py3-pip \
                    && pip3 install --upgrade pip \
                    && pip3 install \
                        awscli \
                    && rm -rf /var/cache/apk/*
      - attach_workspace:
          at: ~/
      - run:
          name: Backend smoke test.
          command: |
            # your code here
            export BACKEND_IP=$(awk "NR==2" ~/project/.circleci/ansible/inventory.txt)
            export API_URL="http://${BACKEND_IP}:3030/api/status"
            echo "Api URL ${API_URL}"
            if (curl -s ${API_URL} | grep ok); # test if backend is running should return json with status ok
            then
              return 0
            else
              return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            export URL="https://udapeople-${CIRCLE_WORKFLOW_ID}.s3.amazonaws.com/index.html"
            echo "Front end URL ${URL}"
            if (curl -s ${URL} | grep Welcome); # test if backend is running
            then
               return 0
            else
               return 1
            fi
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow-id: $CIRCLE_WORKFLOW_ID

      - revert-migrations:
          workflow-id: $CIRCLE_WORKFLOW_ID

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            yum -y install tar
            yum -y install gzip
            yum -y install curl
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
            export AWS_PAGER=""

            export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)

            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text))

            echo Old Workflow Id: "${OldWorkflowID}"
            aws cloudformation deploy \
                --template-file .circleci/files/cloudfront.yml \
                --stack-name "udapeople-cloudfront"  \
                --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID}" \
                --tags project=Udapeople
            if [ ! -z "${OldWorkflowID}" ]
            then
              # your code here
              echo "Cleaning old stack"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive --quiet
              aws cloudformation delete-stack --stack-name "udapeople-front-end-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-back-end-${OldWorkflowID}"
              echo "Finished cleaning previous stack"
            fi
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow-id: $CIRCLE_WORKFLOW_ID

      - revert-migrations:
          workflow-id: $CIRCLE_WORKFLOW_ID

workflows:
  default:
    jobs:
      - build-frontend:
          context:
            - circleci-udapeople-slack
      - build-backend:
          context:
            - circleci-udapeople-slack
      - test-frontend:
          context:
            - circleci-udapeople-slack
          requires: [build-frontend]
      - test-backend:
          context:
            - circleci-udapeople-slack
          requires: [build-backend]
      - scan-backend:
          context:
            - circleci-udapeople-slack
          requires: [build-backend]
      - scan-frontend:
          context:
            - circleci-udapeople-slack
          requires: [build-frontend]
      - deploy-infrastructure:
          context:
            - circleci-udapeople-slack
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only:
                - main
      - configure-infrastructure:
          context:
            - circleci-udapeople-slack
          requires: [deploy-infrastructure]
      - run-migrations:
          context:
            - circleci-udapeople-slack
          requires: [configure-infrastructure]
      - deploy-frontend:
          context:
            - circleci-udapeople-slack
          requires: [run-migrations]
      - deploy-backend:
          context:
            - circleci-udapeople-slack
          requires: [run-migrations]
      - smoke-test:
          context:
            - circleci-udapeople-slack
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          context:
            - circleci-udapeople-slack
          requires: [smoke-test]